import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, JobQueue
import random
from datetime import time, datetime, timedelta
import os
import asyncio
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# === –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–ò –ó–ù–ê–ß–ï–ù–ò–Ø ===
TOKEN = "8031227579:AAGic9Nz_Lc1YXt7oe-NjhZs5UgOCWT2Efg"  # ‚Üê –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω!
YOUR_CHAT_ID = 5226029430  # ‚Üê –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID (—É–∑–Ω–∞—Ç—å: @userinfobot)

# –ö–æ–Ω—Ç–µ–Ω—Ç
—É—Ç—Ä–µ–Ω–Ω–∏–µ_–Ω–∞–º–µ—Ä–µ–Ω–∏—è = [
    "–°–µ–≥–æ–¥–Ω—è —è –ª–µ–≥–∫–æ –Ω–∞—Ö–æ–∂—É —Ä–µ—à–µ–Ω–∏—è",
    "–Ø –≤—ã–±–∏—Ä–∞—é –≤–∞—Ä–∏–∞–Ω—Ç —Å –ª—ë–≥–∫–æ—Å—Ç—å—é",
    "–ú–æ–∏ –º—ã—Å–ª–∏ —Å–æ–∑–¥–∞—é—Ç —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å"
]

—Ü–∏—Ç–∞—Ç—ã = [
    "–ü–æ–∑–Ω–∞–π —Å–µ–±—è ‚Äî –∏ —Ç—ã –ø–æ–∑–Ω–∞–µ—à—å –í—Å–µ–ª–µ–Ω–Ω—É—é. ‚Äî –ì–µ—Ä–º–µ—Å",
    "–°–Ω–∏–∂–∞–π –∑–Ω–∞—á–∏–º–æ—Å—Ç—å ‚Äî –∏ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å —Å–∫–æ–ª—å–∑–∏—Ç. ‚Äî –ó–µ–ª–∞–Ω–¥",
    "–Ø - —á–∞—Å—Ç—å —Ä–∞–∑—É–º–∞, —Å–æ–∑–¥–∞—é—â–µ–≥–æ —ç—Ç–æ—Ç –º–∏—Ä. - –ì–µ—Ä–º–µ—Å",
    "–Ø —Å–Ω–∏–∂–∞—é –∑–Ω–∞—á–∏–º–æ—Å—Ç—å, –Ω–µ —Ü–µ–ø–ª—è—é—Å—å, –¥–æ–≤–µ—Ä—è—é –ø–æ—Ç–æ–∫—É. - –ó–µ–ª–∞–Ω–¥",
]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üåü –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!\n"
        "–ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ –∏ –≤–µ—á–µ—Ä ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n"
        "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∏–Ω–≥–∞!"
    )

async def send_morning(context: ContextTypes.DEFAULT_TYPE):
    try:
        msg = (
            "üåÖ *–£—Ç—Ä–æ*\n\n"
            f"üîπ –ù–∞–º–µ—Ä–µ–Ω–∏–µ: {random.choice(—É—Ç—Ä–µ–Ω–Ω–∏–µ_–Ω–∞–º–µ—Ä–µ–Ω–∏—è)}\n\n"
            f"üîπ –¶–∏—Ç–∞—Ç–∞: {random.choice(—Ü–∏—Ç–∞—Ç—ã)}"
        )
        await context.bot.send_message(chat_id=YOUR_CHAT_ID, text=msg, parse_mode='Markdown')
        logging.info("–£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def send_evening(context: ContextTypes.DEFAULT_TYPE):
    try:
        msg = (
            "üåá *–í–µ—á–µ—Ä*\n\n"
            "üîπ –ß—Ç–æ –ø—Ä–∏—à–ª–æ –±–µ–∑ —É—Å–∏–ª–∏–π?\n"
            "üîπ –ì–¥–µ —è –±—ã–ª –≤ —Ä–µ–∞–∫—Ü–∏–∏?\n"
            "üîπ –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å: 3 –ø—É–Ω–∫—Ç–∞"
        )
        await context.bot.send_message(chat_id=YOUR_CHAT_ID, text=msg, parse_mode='Markdown')
        logging.info("–í–µ—á–µ—Ä–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n"
        "–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç."
    )

async def manual_morning(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await send_morning(context)
    await update.message.reply_text("–£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é")

async def manual_evening(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await send_evening(context)
    await update.message.reply_text("–í–µ—á–µ—Ä–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é")

async def check_jobs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    job_names = [job.name for job in context.application.job_queue.jobs()]
    await update.message.reply_text(f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: {', '.join(job_names) if job_names else '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á'}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("test", test))
    application.add_handler(CommandHandler("morning", manual_morning))
    application.add_handler(CommandHandler("evening", manual_evening))
    application.add_handler(CommandHandler("jobs", check_jobs))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞–Ω–∏–π
    job_queue = application.job_queue
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    moscow_tz = pytz.timezone('Europe/Moscow')
    
    # –†–∞—Å—Å—ã–ª–∫–∞ (–≤—Ä–µ–º—è –≤ –ú–°–ö)
    job_queue.run_daily(send_morning, time(8, 0, 0, tzinfo=moscow_tz))   # 8:00 –ø–æ –ú–°–ö
    job_queue.run_daily(send_evening, time(23, 20, 0, tzinfo=moscow_tz))  # 23:00 –ø–æ –ú–°–ö
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    # job_queue.run_repeating(send_morning, interval=600, first=10)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
    await application.initialize()
    await application.start()
    await application.updater.start_polling()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ application –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑–≤–Ω–µ
    global app_instance
    app_instance = application
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    while True:
        await asyncio.sleep(3600)

# –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
from flask import Flask
from threading import Thread

app = Flask('')

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: " + datetime.now().strftime("%Y-%m-%d %H:%M:%S")

def run_flask():
    app.run(host='0.0.0.0', port=8080)

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    asyncio.run(main())
