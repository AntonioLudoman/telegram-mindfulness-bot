import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import random
from datetime import time
import os
import asyncio
import pytz
from flask import Flask
from threading import Thread

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get('TOKEN')
YOUR_CHAT_ID = int(os.environ.get('YOUR_CHAT_ID'))

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not TOKEN or not YOUR_CHAT_ID:
    logging.error("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: TOKEN –∏ YOUR_CHAT_ID")
    exit(1)

# –ö–æ–Ω—Ç–µ–Ω—Ç
—É—Ç—Ä–µ–Ω–Ω–∏–µ_–Ω–∞–º–µ—Ä–µ–Ω–∏—è = [
    "–°–µ–≥–æ–¥–Ω—è —è –ª–µ–≥–∫–æ –Ω–∞—Ö–æ–∂—É —Ä–µ—à–µ–Ω–∏—è",
    "–Ø –≤—ã–±–∏—Ä–∞—é –≤–∞—Ä–∏–∞–Ω—Ç —Å –ª—ë–≥–∫–æ—Å—Ç—å—é",
    "–ú–æ–∏ –º—ã—Å–ª–∏ —Å–æ–∑–¥–∞—é—Ç —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å"
]

—Ü–∏—Ç–∞—Ç—ã = [
    "–ü–æ–∑–Ω–∞–π —Å–µ–±—è ‚Äî –∏ —Ç—ã –ø–æ–∑–Ω–∞–µ—à—å –í—Å–µ–ª–µ–Ω–Ω—É—é. ‚Äî –ì–µ—Ä–º–µ—Å",
    "–°–Ω–∏–∂–∞–π –∑–Ω–∞—á–∏–º–æ—Å—Ç—å ‚Äî –∏ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å —Å–∫–æ–ª—å–∑–∏—Ç. ‚Äî –ó–µ–ª–∞–Ω–¥"
]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üåü –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!\n"
        "–ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ –∏ –≤–µ—á–µ—Ä ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n"
        "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∏–Ω–≥–∞!"
    )

async def send_morning(context: ContextTypes.DEFAULT_TYPE):
    try:
        msg = (
            "üåÖ *–£—Ç—Ä–æ*\n\n"
            f"üîπ –ù–∞–º–µ—Ä–µ–Ω–∏–µ: {random.choice(—É—Ç—Ä–µ–Ω–Ω–∏–µ_–Ω–∞–º–µ—Ä–µ–Ω–∏—è)}\n\n"
            f"üîπ –¶–∏—Ç–∞—Ç–∞: {random.choice(—Ü–∏—Ç–∞—Ç—ã)}"
        )
        await context.bot.send_message(chat_id=YOUR_CHAT_ID, text=msg, parse_mode='Markdown')
        logging.info("–£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def send_evening(context: ContextTypes.DEFAULT_TYPE):
    try:
        msg = (
            "üåá *–í–µ—á–µ—Ä*\n\n"
            "üîπ –ß—Ç–æ –ø—Ä–∏—à–ª–æ –±–µ–∑ —É—Å–∏–ª–∏–π?\n"
            "üîπ –ì–¥–µ —è –±—ã–ª –≤ —Ä–µ–∞–∫—Ü–∏–∏?\n"
            "üîπ –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å: 3 –ø—É–Ω–∫—Ç–∞"
        )
        await context.bot.send_message(chat_id=YOUR_CHAT_ID, text=msg, parse_mode='Markdown')
        logging.info("–í–µ—á–µ—Ä–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n"
        "–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç."
    )

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
app = Flask(__name__)

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route('/health')
def health():
    return "OK", 200

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("test", test))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞–Ω–∏–π
    job_queue = application.job_queue
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    moscow_tz = pytz.timezone('Europe/Moscow')
    
    # –†–∞—Å—Å—ã–ª–∫–∞ (–≤—Ä–µ–º—è –≤ –ú–°–ö)
    job_queue.run_daily(send_morning, time(8, 0, 0, tzinfo=moscow_tz))   # 8:00 –ø–æ –ú–°–ö
    job_queue.run_daily(send_evening, time(23, 51, 0, tzinfo=moscow_tz))  # 23:00 –ø–æ –ú–°–ö
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
    await application.initialize()
    await application.start()
    await application.updater.start_polling()
    
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    while True:
        await asyncio.sleep(3600)

def run_flask():
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port)

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    asyncio.run(main())
